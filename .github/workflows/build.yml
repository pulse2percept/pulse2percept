name: Build & Test

on:
  push:
    branches:
      - '**'  # Trigger on all branches
  pull_request:
    branches:
      - '**'  # Trigger on all branches involved in PRs

permissions:
  contents: read

jobs:
  build:
    name: Build ${{ matrix.os }} Py ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.13", "3.12", "3.11", "3.10"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
      # Step 1: Check out the repository
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3a: macOS system deps (OpenMP)
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          echo "OMP_PREFIX=$(brew --prefix libomp)" >> "$GITHUB_ENV"

      # Step 3b: Linux system deps
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-dev zlib1g-dev libjpeg-turbo8-dev

      # Step 4: Python tooling only (let build isolation pull NumPy/Cython via pyproject)
      - name: Upgrade pip
        run: |
          python -m pip install --upgrade pip

      # Step 5: Lint
      - name: Lint with flake8
        run: |
          python -m pip install flake8
          flake8 pulse2percept --ignore N802,N806,W504 --select W503 --count --show-source --statistics

      # Ensure no stale build artifacts compiled against a different NumPy/Python
      - name: Clean tree (no stale artifacts)
        run: |
          git clean -xdf || true

      # Runtime NumPy must match the major your build will target:
      # - Py 3.10/3.11 -> NumPy 1.x
      # - Py 3.12/3.13 -> NumPy 2.x
      - name: Pin runtime NumPy for 3.10/3.11
        if: matrix.python-version == '3.10' || matrix.python-version == '3.11'
        run: |
          python -m pip install "numpy<2"

      - name: Pin runtime NumPy for 3.12/3.13
        if: matrix.python-version == '3.12' || matrix.python-version == '3.13'
        run: |
          python -m pip install "numpy>=2,<3"

      # Step 6: Install package (editable) with dev extras
      # Build isolation + oldest-supported-numpy (from pyproject) selects the right build-time NumPy.
      - name: Install package (editable + dev extras)
        run: |
          python -m pip install -e ".[dev]" --force-reinstall

      # Step 7: Log env info
      - name: Log environment info
        run: |
          python --version
          pip freeze
          pip show pulse2percept

      # Step 8: Conditional Test Execution
      - name: Run default test suite for push
        if: github.event_name == 'push' && !github.event.pull_request
        run: |
          mkdir -p test_dir
          cd test_dir
          pytest --pyargs pulse2percept --cov=pulse2percept --cov-branch --cov-report=xml --doctest-modules

      - name: Run slow tests for pull requests
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p test_dir
          cd test_dir
          pytest --pyargs pulse2percept --cov=pulse2percept --runslow --cov-branch --cov-report=xml --doctest-modules

      # Step 9: Codecov
      - name: Upload coverage report to codecov.io
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@fdcc8476540edceab3de004e990f80d881c6cc00 # v5.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: pulse2percept/pulse2percept
