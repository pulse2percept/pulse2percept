name: Build & Test

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  contents: read

jobs:
  build:
    name: Build ${{ matrix.os }} Py ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13", "3.12", "3.11", "3.10"]
        os: [ubuntu-latest, windows-latest, macos-latest]

    # Force bash on all OSes (avoids PowerShell var-expansion issues on Windows)
    defaults:
      run:
        shell: bash

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: ${{ matrix.python-version }}

      # ---- System deps ----
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          echo "OMP_PREFIX=$(brew --prefix libomp)" >> "$GITHUB_ENV"

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-dev zlib1g-dev libjpeg-turbo8-dev

      # ---- Decide NumPy major per Python ----
      - name: Choose NumPy major
        run: |
          py="${{ matrix.python-version }}"
          if [[ "$py" == 3.10* || "$py" == 3.11* ]]; then
            echo "NUMPY_SPEC=<2" >> "$GITHUB_ENV"       # build+run on NumPy 1.26.x ABI
          else
            echo "NUMPY_SPEC=>=2,<3" >> "$GITHUB_ENV"   # build+run on NumPy 2.x ABI
          fi

      # ---- Bootstrap build toolchain + the right NumPy headers ----
      - name: Upgrade pip and bootstrap build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install "setuptools>=64" wheel "Cython>=3.0.8" "numpy${NUMPY_SPEC}"
          python -c "import numpy, sys; print('Build NumPy', numpy.__version__, 'on', sys.version)"

      # ---- Constraints to stop test deps from upgrading NumPy on 3.10/3.11 ----
      - name: Write constraints
        run: |
          CFILE="$RUNNER_TEMP/constraints.txt"
          py="${{ matrix.python-version }}"
          if [[ "$py" == 3.10* || "$py" == 3.11* ]]; then
            {
              echo "numpy<2"
              echo "scipy<1.16"
            } > "$CFILE"
          else
            # empty file
            : > "$CFILE"
          fi
          echo "CONSTRAINTS_FILE=$CFILE" >> "$GITHUB_ENV"

      # ---- Lint ----
      - name: Lint with flake8
        run: |
          python -m pip install flake8
          flake8 pulse2percept --ignore N802,N806,W504 --select W503 --count --show-source --statistics

      # ---- Install package (editable) with dev extras ----
      # Use --no-build-isolation so Cython uses the preinstalled NumPy headers.
      # Only pass -c if the constraints file is non-empty.
      - name: Install package (editable + dev extras)
        run: |
          CONS_ARGS=()
          if [[ -s "$CONSTRAINTS_FILE" ]]; then
            CONS_ARGS=(-c "$CONSTRAINTS_FILE")
          fi
          python -m pip install -e ".[dev]" --no-build-isolation "${CONS_ARGS[@]}"
          python -c "import numpy, pulse2percept as p2p; print('Runtime NumPy', numpy.__version__); print('p2p version:', getattr(p2p, '__version__', 'unknown'))"

      # ---- Log env ----
      - name: Log environment info
        run: |
          python --version
          pip show numpy
          pip show scipy || true
          pip show pulse2percept
          pip freeze | sed -n '1,120p'

      # ---- Tests ----
      - name: Run default test suite for push
        if: github.event_name == 'push' && !github.event.pull_request
        run: |
          mkdir -p test_dir && cd test_dir
          pytest --pyargs pulse2percept --cov=pulse2percept --cov-branch --cov-report=xml --doctest-modules -x

      - name: Run slow tests for pull requests
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p test_dir && cd test_dir
          pytest --pyargs pulse2percept --cov=pulse2percept --runslow --cov-branch --cov-report=xml --doctest-modules -x

      # ---- Coverage upload ----
      - name: Upload coverage report to codecov.io
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: pulse2percept/pulse2percept
