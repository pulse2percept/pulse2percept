name: Build & Test

on:
  push:
    branches:
      - '**'  # Trigger on all branches
  pull_request:
    branches:
      - '**'  # Trigger on all branches involved in PRs

jobs:
  build:
    name: Build ${{ matrix.os }} Py ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
        os:  # https://github.com/actions/runner-images/tree/main
          - "windows-2019", 
          - "windows-2022", 
          - "windows-2025",
          - "macos-13",
          - "macos-13-xlarge",
          - "macos-14",
          - "macos-14-large",
          - "macos-15",
          - "macos-15-large",
          - "ubuntu-22.04",
          - "ubuntu-24.04",
        exclude:
          - python-version: "3.9"
            os: "macos-13"
          - python-version: "3.9"
            os: "macos-13-xlarge"
          - python-version: "3.9"
            os: "macos-14"
          - python-version: "3.9"
            os: "macos-14-large"
          - python-version: "3.9"
            os: "macos-15"
          - python-version: "3.9"
            os: "macos-15-large"
      fail-fast: false

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3a: Install dependencies (macOS only)
      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libomp llvm
          export PATH="$(brew --prefix llvm)/bin:$PATH"
          export CC="$(brew --prefix llvm)/bin/clang"
          export CXX="$(brew --prefix llvm)/bin/clang++"
          export CPPFLAGS="-I$(brew --prefix libomp)/include -I$(brew --prefix llvm)/include"
          export LDFLAGS="-L$(brew --prefix libomp)/lib -L$(brew --prefix llvm)/lib -lomp"

      # Step 3b: Install dependencies (Linux only)
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-dev zlib1g-dev libjpeg-turbo8-dev

      # Step 4: Install Python dependencies
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build numpy Cython
          
      # Step 5: lint
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 pulse2percept --ignore N802,N806,W504 --select W503 --count --show-source --statistics

      # Step 6a: Install the package (Windows)
      - name: Install package (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python setup.py build_ext --inplace
          python -m pip install ".[dev]"

      - name: Check if _fast_array.pyd exists
        run: |
          Get-ChildItem pulse2percept/utils/

      - name: Debug Import on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -c "import pulse2percept.utils._fast_math"
          python -c "import pulse2percept.utils._fast_array"

            
      # Step 6b: Install the package (Non-Windows)
      - name: Install package (Unix)
        if: runner.os != 'Windows'
        run: |
          pip uninstall -y pulse2percept || true
          python setup.py build_ext --inplace
          python -m pip install ".[dev]"
      
      # Step 7: Log
      - name: Log environment info
        run: |
          python --version
          pip freeze
          gcc --version
          pip show pulse2percept
          
      # Step 8: Conditional Test Execution
      - name: Run default test suite for push
        if: github.event_name == 'push' && !github.event.pull_request
        run: |
          mkdir test_dir
          cd test_dir
          pytest --pyargs pulse2percept --doctest-modules

      - name: Run slow tests for pull requests
        if: github.event_name == 'pull_request'
        run: |
          mkdir test_dir
          cd test_dir
          pytest --pyargs pulse2percept --runslow --cov-report=xml --cov=pulse2percept --doctest-modules        
          
      # Step 9: Codecov
      - name: Upload coverage report to codecov.io
        if: github.event_name == 'pull_request'
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./test_dir/coverage.xml
          flags: unittests
          name: codecov-umbrella
          yml: ./codecov.yml
