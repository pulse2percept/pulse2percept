name: Wheels

on:
  push:
    branches:
      - master
      - torch
    tags:
      - v*
  pull_request:
    branches:
      - master
      - torch

jobs:
  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - "ubuntu-latest"
          - "ubuntu-24.04-arm"
          - "windows-latest"
          - "macos-13"
          - "macos-14"

    steps:
      # Step 1: Check out the repository
      - uses: actions/checkout@v4

      # Step 2a: Install dependencies (MacOS) and build OpenMP
      - name: Install dependencies (MacOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
          git clone https://github.com/llvm/llvm-project.git --depth=1
          cd llvm-project/openmp
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$HOME/.local -DCMAKE_OSX_DEPLOYMENT_TARGET=11.0 -G Ninja
          ninja
          ninja install
        env:
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      # Step 2b: Install dependencies (Linux)
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-dev zlib1g-dev libjpeg-turbo8-dev

      # Step 3: Build wheels using cibuildwheel
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          # Ensure we use the manually built OpenMP
          MACOSX_DEPLOYMENT_TARGET: "11.0"
          CIBW_ENVIRONMENT_MACOS: |
            OMP_PATH=$HOME/.local
            CFLAGS="-std=c99 -mmacosx-version-min=11.0 -I$OMP_PATH/include -Xclang -fopenmp"
            LDFLAGS="-L$OMP_PATH/lib -mmacosx-version-min=11.0 -Wl,-rpath,$OMP_PATH/lib -Wl,-rpath,@loader_path/../.dylibs -lomp"
            PATH="$OMP_PATH/bin:$PATH"
          # Linux-specific OpenMP settings
          CIBW_ENVIRONMENT_LINUX: "CFLAGS='-fopenmp'"
          # Windows-specific OpenMP settings
          CIBW_ENVIRONMENT_WINDOWS: "CFLAGS='/openmp'"
          # Pre-build steps
          CIBW_BEFORE_BUILD: "python -m pip install --upgrade pip setuptools wheel cython numpy"
          # Python versions to build for
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          # Skip specific wheels (No Python 3.9 on macOS)
          CIBW_SKIP: "*-manylinux_i686 *-win32 *musllinux* cp39-macosx_*"

      # Step 4: Upload the built wheels as artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
