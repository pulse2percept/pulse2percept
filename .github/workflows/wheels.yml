name: Wheels

on:
  push:
    branches: [ master, torch ]
    tags: [ v* ]
  pull_request:
    branches: [ master, torch ]

jobs:
  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # Linux system deps
      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libomp-dev zlib1g-dev libjpeg-turbo8-dev

      - name: Build wheels
        uses: pypa/cibuildwheel@7c619efba910c04005a835b110b057fc28fd6e93 # v3.2.0
        env:
          # ---------- macOS: install libomp; compile & repair with macOS 15 target ----------
          CIBW_BEFORE_ALL_MACOS: |
            brew update
            brew install libomp || brew reinstall libomp
          CIBW_BEFORE_BUILD_MACOS: |
            echo "libomp prefix: $(brew --prefix libomp)"
            ls -l "$(brew --prefix libomp)/include/omp.h" || (echo "omp.h missing" && exit 1)
            python -m pip install --upgrade pip setuptools wheel cython delocate oldest-supported-numpy
          CIBW_ENVIRONMENT_MACOS: |
            OMP_PREFIX="$(brew --prefix libomp)"
            MACOSX_DEPLOYMENT_TARGET=15.0
            CFLAGS="-std=c99 -O3 -Xpreprocessor -fopenmp -I${OMP_PREFIX}/include"
            CPPFLAGS="-I${OMP_PREFIX}/include"
            LDFLAGS="-L${OMP_PREFIX}/lib -lomp"
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=15.0 delocate-listdeps {wheel} &&
            MACOSX_DEPLOYMENT_TARGET=15.0 delocate-wheel -w {dest_dir} {wheel}

          # ---------- Linux: enable OpenMP; OSN picks a compatible NumPy ----------
          CIBW_ENVIRONMENT_LINUX: "CFLAGS='-fopenmp'"
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install --upgrade pip setuptools wheel cython oldest-supported-numpy"

          # ---------- Windows: enable OpenMP; OSN picks a compatible NumPy ----------
          CIBW_ENVIRONMENT_WINDOWS: "CFLAGS='/openmp'"
          CIBW_BEFORE_BUILD_WINDOWS: "python -m pip install --upgrade pip setuptools wheel cython oldest-supported-numpy"

          # ---------- Python versions / skips ----------
          CIBW_BUILD: "cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-manylinux_i686 *-win32 *musllinux*"

          # Build separate wheels for both Apple architectures
          CIBW_ARCHS_MACOS: "x86_64 arm64"

      - name: Upload wheels
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  # ------------------------------------------------------------------------------------
  # Install & smoke-test using the freshly-built LINUX wheel (Colab-ish environment)
  # ------------------------------------------------------------------------------------
  colab_smoke_from_wheel:
    name: Colab-ish (from wheel) • py${{ matrix.py }}
    runs-on: ubuntu-latest
    needs: build_wheels
    strategy:
      fail-fast: false
      matrix:
        py: [ "3.12" ]  # keep in sync with Colab

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      - name: Create venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip setuptools wheel packaging

      - name: Download wheel artifacts (all OS)
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          pattern: cibw-wheels-*
          merge-multiple: true
          path: ./dist-all

      - name: Select Linux wheel matching this Python
        id: pick
        run: |
          set -euo pipefail
          ls -1 dist-all || true
          PYTAG="cp$(python -c 'import sys; print(str(sys.version_info.major)+str(sys.version_info.minor))')"
          echo "Looking for manylinux wheel for $PYTAG"
          WHEEL=$(ls dist-all/*${PYTAG}*manylinux*.whl | head -n 1 || true)
          if [ -z "${WHEEL:-}" ]; then
            echo "No manylinux wheel found for $PYTAG" >&2
            exit 1
          fi
          echo "wheel=$WHEEL" >> "$GITHUB_OUTPUT"
          echo "Selected wheel: $WHEEL"

      - name: Install wheel
        run: |
          source .venv/bin/activate
          python -m pip install "${{ steps.pick.outputs.wheel }}"

      - name: Verify runtime deps from installed metadata
        run: |
          source .venv/bin/activate
          python .github/scripts/verify_runtime_deps.py
          python -m pip check

      - name: Smoke import (minimal path)
        run: |
          source .venv/bin/activate
          python - <<'PY'
          from pulse2percept.models import ScoreboardModel
          _ = ScoreboardModel().build()
          print("ScoreboardModel build OK (wheel)")
          PY

  # ------------------------------------------------------------------------------------
  # Optional: also test installing from git+<ref> (source build), like users do in Colab
  # ------------------------------------------------------------------------------------
  colab_smoke_from_git:
    name: Colab-ish (from git) • py${{ matrix.py }}
    runs-on: ubuntu-latest
    needs: build_wheels
    strategy:
      fail-fast: false
      matrix:
        py: [ "3.12" ]

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.py }}

      # Toolchain similar to Colab base image; helps source builds
      - name: Install build toolchain (gcc/OpenMP/Fortran)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gfortran libomp-dev pkg-config

      - name: Create venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip setuptools wheel packaging

      # Pre-install build deps and avoid surprises from build isolation
      - name: Install from current ref (source)
        env:
          PIP_NO_INPUT: "1"
        run: |
          set -euo pipefail
          source .venv/bin/activate
          # build deps (headers) for Cython extensions
          python -m pip install -U cython "numpy>=2"
          # build from the exact ref under test
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            REPO="${{ github.event.pull_request.head.repo.full_name }}"
            REF="${{ github.event.pull_request.head.sha }}"
          else:
            REPO="${{ github.repository }}"
            REF="${{ github.sha }}"
          fi
          URL="git+https://github.com/${REPO}@${REF}"
          echo "Installing from: $URL"
          # If your PEP 517 backend needs isolation, drop --no-build-isolation
          python -m pip install --no-build-isolation -v "$URL"

      - name: Verify runtime deps from installed metadata
        run: |
          source .venv/bin/activate
          python .github/scripts/verify_runtime_deps.py
          python -m pip check

      - name: Smoke import (minimal path)
        run: |
          source .venv/bin/activate
          python - <<'PY'
          from pulse2percept.models import ScoreboardModel
          _ = ScoreboardModel().build()
          print("ScoreboardModel build OK (git)")
          PY
