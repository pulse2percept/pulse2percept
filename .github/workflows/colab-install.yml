name: Colab-ish PR install smoke

on:
  push:
    branches: [ master, '**' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch: {}

jobs:
  colab_smoke:
    name: Colab-ish â€¢ py${{ matrix.python }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python: ["3.12"]  # keep aligned with Colab

    steps:
      - uses: actions/checkout@v4
        with:
          # For PRs from forks, this checks out the PR HEAD commit; for pushes, the current SHA
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install build toolchain (gcc, OpenMP, Fortran)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential gfortran libomp-dev pkg-config

      - name: Create venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install -U pip setuptools wheel packaging

      - name: Install from current ref (verbose, robust)
        env:
          PIP_NO_INPUT: "1"
        run: |
          set -euo pipefail
          source .venv/bin/activate
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            REPO="${{ github.event.pull_request.head.repo.full_name }}"
            REF="${{ github.event.pull_request.head.sha }}"
          else
            REPO="${{ github.repository }}"
            REF="${{ github.sha }}"
          fi
          URL="git+https://github.com/${REPO}@${REF}"
          echo "Installing: $URL"
          [ -n "$URL" ] || { echo "ERROR: VCS URL empty"; exit 2; }
          python -m pip install -v "$URL"

      - name: Verify runtime deps from installed metadata
        run: |
          source .venv/bin/activate
          python .github/scripts/verify_runtime_deps.py
          python -m pip check

      - name: Assert compiled C-extension artifact exists (non-fatal log)
        continue-on-error: true
        run: |
          source .venv/bin/activate
          python - <<'PY'
          import pathlib, importlib
          import pulse2percept as p2p
          utils_dir = pathlib.Path(p2p.__file__).with_name("utils")
          arts = list(utils_dir.glob("_fast_array*.so")) + list(utils_dir.glob("_fast_array*.pyd"))
          print("utils_dir:", utils_dir)
          print("compiled artifacts:", [a.name for a in arts])
          PY

      - name: Smoke import (minimal path)
        run: |
          source .venv/bin/activate
          python - <<'PY'
          from pulse2percept.models import ScoreboardModel
          m = ScoreboardModel().build()
          print("ScoreboardModel build OK")
          PY
